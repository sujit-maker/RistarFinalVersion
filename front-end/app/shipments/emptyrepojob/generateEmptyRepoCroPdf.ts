import jsPDF from "jspdf";
import axios from "axios";
import dayjs from "dayjs";
import customParseFormat from 'dayjs/plugin/customParseFormat';
dayjs.extend(customParseFormat);


const ristarLogoBase64 =
  " ";

function groupContainerSizes(containers: any[]): string {
  const sizeCount: Record<string, number> = {};
  containers.forEach((c) => {
    const size = c.containerSize || "N/A";
    sizeCount[size] = (sizeCount[size] || 0) + 1;
  });
  return Object.entries(sizeCount)
    .map(([size, count]) => `${count} x ${size}`)
    .join(", ");
}

// Helper function to add text with proper spacing and formatting
function addTextWithSpacing(
  doc: any,
  label: string,
  value: string,
  x: number,
  y: number,
  labelWidth: number = 45
) {
  doc.setFont("arial", "bold");
  doc.setFontSize(10);
  doc.text(label, x, y);
  doc.setFont("arial", "normal");
  doc.setFontSize(10);
  doc.text(value, x + labelWidth, y);
}


// value can be string | number | Date | null | undefined
export function safeDayjsFormat(
  value: any,
  outFmt: string = "DD-MM-YYYY",
  options?: {
    parseFmt?: string;  // if your input has a known format (e.g. "YYYY-MM-DD")
    strict?: boolean;   // default true
    fallback?: string;  // what to show if invalid/missing
  }
): string {
  const { parseFmt, strict = true, fallback = "Date not set yet" } = options || {};

  if (!value) return fallback;

  const d = parseFmt
    ? dayjs(value, parseFmt, strict)
    : dayjs(value);

  if (!d.isValid()) return fallback;

  return d.format(outFmt);
}

export async function generateEmptyRepoCroPdf(
  emptyRepoJobId: number,
  selectedContainers: any[],
  providedDate?: string
) {
  // Create PDF with custom wider dimensions for better content spacing
  const doc = new jsPDF("p", "mm", [250, 297]); // Increased width from 220 to 250mm

  try {
    // Validate input parameters
    if (
      !emptyRepoJobId ||
      !selectedContainers ||
      selectedContainers.length === 0
    ) {
      console.error(
        "Invalid parameters: emptyRepoJobId or selectedContainers missing"
      );
      return;
    }

    console.log("Starting PDF generation for empty repo job:", emptyRepoJobId);
    const [
      emptyRepoJobRes,
      addressBooksRes,
      productsRes,
      inventoryRes,
      movementHistoryRes,
    ] = await Promise.all([
      axios.get(`http://localhost:8000/empty-repo-job/${emptyRepoJobId}`),
      axios.get(`http://localhost:8000/addressbook`),
      axios.get(`http://localhost:8000/products`),
      axios.get(`http://localhost:8000/inventory`),
      axios.get(`http://localhost:8000/movement-history`),
    ]);

    const emptyRepoJob = emptyRepoJobRes.data;
    const addressBooks = addressBooksRes.data;
    const products = productsRes.data;
    const inventory = inventoryRes.data;
    const movementHistory = movementHistoryRes.data;
    
   

    // Get all unique shipment IDs from movement history to fetch their details
    const uniqueShipmentIds = [
      ...new Set(
        movementHistory
          .map((mh: any) => mh?.shipmentId)
          .filter((id: any) => id != null && !isNaN(Number(id)))
      ),
    ] as number[];
    console.log(
      "Unique shipment IDs found in movement history:",
      uniqueShipmentIds
    );

    // Fetch all shipments referenced in movement history
    const allShipmentsData: any = {};
    await Promise.all(
      uniqueShipmentIds.map(async (id: number) => {
        try {
          const shipmentResponse = await axios.get(
            `http://localhost:8000/shipment/${id}`
          );
          allShipmentsData[id] = shipmentResponse.data;
          console.log(
            `Successfully fetched shipment ${id}:`,
            shipmentResponse.data.productId
          );
        } catch (error) {
          console.log(
            `Failed to fetch shipment ${id} (probably deleted):`,
            error
          );
          // For deleted shipments, we'll need to rely on movement history data
          allShipmentsData[id] = null;
        }
      })
    );

    // Get company information from empty repo job
    const shipper = addressBooks.find(
      (ab: any) => ab.id === emptyRepoJob.shipperAddressBookId
    );
    const carrier = addressBooks.find(
      (ab: any) => ab.id === emptyRepoJob.carrierAddressBookId
    );
    const emptyReturnDepot = addressBooks.find(
      (ab: any) => ab.id === emptyRepoJob.emptyReturnDepotAddressBookId
    );
    const expHandlingAgent = addressBooks.find(
      (ab: any) => ab.id === emptyRepoJob.expHandlingAgentAddressBookId
    );
    const impHandlingAgent = addressBooks.find(
      (ab: any) => ab.id === emptyRepoJob.impHandlingAgentAddressBookId
    );

    // Get the primary depot information - this should match what's shown in the CRO modal
    const primaryDepot =
      addressBooks.find(
        (ab: any) =>
          ab.companyName ===
          (emptyRepoJob.containers?.[0]?.depotName || "Unknown Depot")
      ) ||
      addressBooks.find(
        (ab: any) =>
          ab.name ===
          (emptyRepoJob.containers?.[0]?.depotName || "Unknown Depot")
      ) ||
      addressBooks.find((ab: any) => {
        const depotName =
          emptyRepoJob.containers?.[0]?.depotName || "Unknown Depot";
        return (
          ab.companyName?.includes(depotName) ||
          depotName.includes(ab.companyName)
        );
      });

    // Format dates - use provided date for CRO if available (for consistency), otherwise use empty repo job date
    const croDate = providedDate
      ? dayjs(providedDate).format("DD MMM YYYY")
      : dayjs(emptyRepoJob.date).format("DD MMM YYYY");
const releaseDate = safeDayjsFormat(emptyRepoJob?.gsDate, 'DD-MM-YYYY');
    const etd =
      emptyRepoJob.gsDate && dayjs(emptyRepoJob.gsDate).isValid()
        ? dayjs(emptyRepoJob.gsDate).format("DD-MM-YYYY")
        : "";
    const eta =
      emptyRepoJob.etaTopod && dayjs(emptyRepoJob.etaTopod).isValid()
        ? dayjs(emptyRepoJob.etaTopod).format("DD-MM-YYYY")
        : "";

    // Get port information
    const pol = emptyRepoJob.polPort?.portName || "N/A";
    const pod = emptyRepoJob.podPort?.portName || "N/A";
    const finalDestination = emptyRepoJob.podPort?.portName || "N/A";

    // Get vessel information
    const vesselVoyage = emptyRepoJob.vesselName || "N/A";

    // For empty repo jobs, we don't have specific products since they are for empty containers
    const productName = "Empty Tank Container";
    const productType = "Non-Hazardous";

    // Add containerSize to each container and get cargo history
    const containersWithSize = selectedContainers.map((sc) => {
      const inv = inventory.find(
        (inv: any) => inv.containerNumber === sc.containerNumber
      );

      // Debug: Log the movement history structure for the first time
      if (sc === selectedContainers[0]) {
        console.log("=== MOVEMENT HISTORY DEBUG ===");
        console.log("Movement history array length:", movementHistory.length);
        console.log("Sample movement history record:", movementHistory[0]);
        console.log(
          "Selected container numbers:",
          selectedContainers.map((c) => c.containerNumber)
        );

        // Log all movements for this specific container to understand the structure
        const debugMovements = movementHistory.filter((mh: any) => {
          const movementContainerNumber = mh.inventory?.containerNumber;
          return movementContainerNumber === sc.containerNumber;
        });
        console.log(
          `All movements for container ${sc.containerNumber}:`,
          debugMovements
        );
        console.log("Fetched shipments data:", allShipmentsData);

        // Log shipment IDs found in movements vs fetched data
        const movementShipmentIds = debugMovements
          .map((m: any) => m.shipmentId)
          .filter(Boolean);
        console.log("Shipment IDs from movements:", movementShipmentIds);
        console.log(
          "Successfully fetched shipment IDs:",
          Object.keys(allShipmentsData).filter(
            (id) => allShipmentsData[id] !== null
          )
        );
        console.log(
          "Failed/deleted shipment IDs:",
          Object.keys(allShipmentsData).filter(
            (id) => allShipmentsData[id] === null
          )
        );
        console.log("Current empty repo job ID:", emptyRepoJobId);
        console.log("Current empty repo job:", emptyRepoJob.jobNumber);
        console.log("===============================");
      }

      // Filter movement history based on the actual API structure
      const containerMovements = movementHistory.filter((mh: any) => {
        try {
          // Check if this movement history record matches the current container
          const movementContainerNumber = mh?.inventory?.containerNumber;
          return movementContainerNumber === sc.containerNumber;
        } catch (error) {
          console.log("Error filtering movement:", error);
          return false;
        }
      });

      console.log(
        `Container ${sc.containerNumber}: Found ${containerMovements.length} matching movements`
      );

      // Only log detailed movement info for debugging if needed
      if (containerMovements.length > 0 && sc === selectedContainers[0]) {
        console.log(
          "Sample movements for debugging:",
          containerMovements.slice(0, 2)
        );
      }

      // Sort by date descending and get last 3 movements
      const sortedMovements = containerMovements
        .sort((a: any, b: any) => {
          try {
            // Use the date field from the actual API structure
            const dateA = new Date(a?.date || 0);
            const dateB = new Date(b?.date || 0);
            return dateB.getTime() - dateA.getTime();
          } catch (error) {
            console.log("Error sorting movements:", error);
            return 0;
          }
        })
        .slice(0, 3);

      console.log(
        `Sorted movements for ${sc.containerNumber}:`,
        sortedMovements
      );

      // Get product names for the movements - REAL DATA ONLY
      const last3Products: string[] = [];

      console.log(
        `\n=== PROCESSING PRODUCTS FOR CONTAINER ${sc.containerNumber} ===`
      );
      console.log(
        `Found ${sortedMovements.length} movements for this container`
      );

      // Process each movement to find products - ONLY USE REAL FETCHED DATA
      sortedMovements.forEach((movement: any, index: number) => {
        console.log(`\n--- Processing Movement ${index + 1} ---`);
        console.log(`Movement Shipment ID: ${movement.shipmentId}`);
        console.log(`Current empty repo job ID: ${emptyRepoJobId}`);

        // Skip if no shipment ID or invalid movement
        if (!movement.shipmentId || !movement.date || !movement.id) {
          console.log(`⚠ Movement ${index + 1} invalid, skipping`);
          return;
        }

        let productName: string | null = null;

        // For empty repo jobs, we only look at historical shipments to see what was previously carried
        if (
          allShipmentsData[movement.shipmentId] &&
          allShipmentsData[movement.shipmentId] !== null
        ) {
          const fetchedShipment = allShipmentsData[movement.shipmentId];
          if (fetchedShipment.productId) {
            const product = products.find(
              (p: any) => p.id === fetchedShipment.productId
            );
            if (product?.productName) {
              productName = product.productName;
              console.log(`✓ Historical shipment product: ${productName}`);
            }
          }
        }
        // For deleted shipments - DO NOT ADD ANY PRODUCT
        else {
          console.log(
            `⚠ Shipment ${movement.shipmentId} deleted or not found - skipping product`
          );
          return;
        }

        // Add to list if found and unique
        if (productName && !last3Products.includes(productName)) {
          last3Products.push(productName);
          console.log(`✓ Added to cargo list: ${productName}`);
        } else if (productName) {
          console.log(`⚠ Skipped duplicate product: ${productName}`);
        }
      });

      // Finalize the cargo list - NO DUMMY DATA
      console.log(`\n--- FINALIZING CARGO LIST ---`);
      console.log(
        `Real products found: ${last3Products.length} - [${last3Products.join(
          ", "
        )}]`
      );

      // For empty repo jobs, we don't add any current product since containers are empty

      // Fill remaining slots with "N/A" ONLY
      while (last3Products.length < 3) {
        last3Products.push("N/A");
        console.log(`Added N/A to slot ${last3Products.length}`);
      }

      // Ensure exactly 3 products
      if (last3Products.length > 3) {
        last3Products.splice(3);
      }

      console.log(`\n=== FINAL CARGO LIST FOR ${sc.containerNumber} ===`);
      console.log(`Final products: [${last3Products.join(", ")}]`);
      console.log(`=================================================\n`);

      return {
        ...sc,
        containerSize: inv?.containerSize || "N/A",
        last3Cargo: last3Products,
      };
    });

    // Group containers by depot and port combination for separate pages
    const containerGroups: { [key: string]: any[] } = {};

    containersWithSize.forEach((container) => {
      const depotName = container.depotName || "Unknown Depot";

      // Get container-specific port details from movement history or use shipment POL
      // First try to get port from container's movement history or associated data
      let containerPort = pol; // Default to shipment POL

      // Check if container has specific port information
      const containerMovements = movementHistory.filter((mh: any) => {
        const movementContainerNumber = mh?.inventory?.containerNumber;
        return movementContainerNumber === container.containerNumber;
      });

      // If we have movement history for this container, try to extract port info
      if (containerMovements.length > 0) {
        // Look for port information in the most recent movement
        const latestMovement = containerMovements[0]; // Already sorted by date

        // Try to get port from the movement's shipment data
        if (
          latestMovement.shipmentId &&
          allShipmentsData[latestMovement.shipmentId]
        ) {
          const movementShipment = allShipmentsData[latestMovement.shipmentId];
          if (movementShipment?.polPort?.portName) {
            containerPort = movementShipment.polPort.portName;
          }
        }
      }

      // Use container-specific port or fall back to general port
      const portName = container.portName || container.port || containerPort;
      const groupKey = `${depotName}|${portName}`;

      if (!containerGroups[groupKey]) {
        containerGroups[groupKey] = [];
      }
      containerGroups[groupKey].push({
        ...container,
        specificPort: portName, // Store the specific port for this container
      });
    });

    console.log("Container groups created:", Object.keys(containerGroups));
    console.log("Groups details:", containerGroups);

    // Generate a separate page for each depot/port combination
    let isFirstGroup = true;

    Object.entries(containerGroups).forEach(([groupKey, groupContainers]) => {
      const [depotName, portName] = groupKey.split("|");

      console.log(
        `Processing group: ${groupKey} with ${groupContainers.length} containers`
      );

      // Add new page for subsequent groups
      if (!isFirstGroup) {
        doc.addPage();
      }

      // Use the primary depot information that was fetched earlier
      // This ensures consistency with the CRO modal form data
      let depot = primaryDepot;

      // Fallback to lookup if primary depot is not available
      if (!depot) {
        depot =
          addressBooks.find((ab: any) => ab.companyName === depotName) ||
          addressBooks.find((ab: any) => ab.name === depotName) ||
          addressBooks.find(
            (ab: any) =>
              ab.companyName?.includes(depotName) ||
              depotName.includes(ab.companyName)
          );
      }

      console.log(`Using depot for ${depotName}:`, depot);

      const depotAddress = depot?.address || "N/A";
      const depotContact = depot?.phone || "N/A";
      const depotEmail = depot?.email || "N/A";
      const depotMobile = depot?.mobile || depot?.mobileNumber || ""; // For empty repo jobs, mobile should be empty if not provided

      const containerTypeSummary = groupContainerSizes(groupContainers);
      const containerCount = groupContainers.length;

      // Use group-specific port information for each container group
      // Get port details specific to this container group
      let groupPol, groupPod, groupEta, groupEtd;

      // If this group has containers from a different port, get that port's info
      const firstContainer = groupContainers[0];
      const containerSpecificPort = firstContainer.specificPort;

      if (containerSpecificPort && containerSpecificPort !== pol) {
        // This group has containers from a different port
        groupPol = containerSpecificPort;
        groupPod = containerSpecificPort; // Assume same port for POD if different

        // Try to get specific ETA/ETD for this port from container movements
        const containerMovements = movementHistory.filter((mh: any) => {
          return groupContainers.some(
            (gc) => mh?.inventory?.containerNumber === gc.containerNumber
          );
        });

        if (containerMovements.length > 0) {
          const latestMovement = containerMovements[0];
          if (
            latestMovement.shipmentId &&
            allShipmentsData[latestMovement.shipmentId]
          ) {
            const movementShipment =
              allShipmentsData[latestMovement.shipmentId];
            groupEta =
              movementShipment.etaTopod &&
              dayjs(movementShipment.etaTopod).isValid()
                ? dayjs(movementShipment.etaTopod).format("DD-MM-YYYY")
                : eta;
            groupEtd =
              movementShipment.gsDate &&
              dayjs(movementShipment.gsDate).isValid()
                ? dayjs(movementShipment.gsDate).format("DD-MM-YYYY")
                : etd;
          } else {
            groupEta = eta;
            groupEtd = etd;
          }
        } else {
          groupEta = eta;
          groupEtd = etd;
        }
      } else {
        // Use original shipment port info
        groupPol = pol;
        groupPod = pod;
        groupEta = eta;
        groupEtd = etd;
      }

      // Final destination should match POD for this group
      const groupFinalDestination = groupPod;

      // --- HEADER SECTION ---
      // Left side - Ristar Logo
      if (ristarLogoBase64) {
        doc.addImage(ristarLogoBase64, "PNG", 14, 5, 100, 30);
      }

      // Right side - Company details (shifted more to the right)
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0);
      doc.text("RISTAR LOGISTICS PTE. LTD.", 160, 11);

      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text("GSTIN 27AAOCR2909Q1ZK", 160, 16);
      doc.text("Office No. C-0010, Akshar Business Park, Sector 25", 160, 21);
      doc.text("Vashi, Navi Mumbai, Maharashtra, India 400703.", 160, 26);
      doc.text("TEL: +65 6221 4844", 160, 31);
      doc.text("WWW.RISTARLOGISTICS.COM", 160, 36);

      // --- DOCUMENT TITLE ---
      doc.setFont("arial", "bold");
      doc.setFontSize(16);
      doc.setTextColor(0, 0, 0);
      doc.text("CONTAINER RELEASE ORDER", 120, 50, { align: "center" });

      // --- ORIGINATOR/TERMINAL DETAILS ---
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("ORIGINATOR/TERMINAL:", 14, 60);

      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(depotName, 14, 66);

      // Split long address into multiple lines to prevent overlapping and going out of bounds
      const maxAddressWidth = 90; // Increased width to take advantage of wider PDF page
      const addressLines = doc.splitTextToSize(depotAddress, maxAddressWidth);
      let addressYPos = 71;
      addressLines.forEach((line: string, index: number) => {
        doc.text(line, 14, addressYPos + index * 4);
      });

      // Adjust subsequent field positions based on address line count
      const extraLines = Math.max(0, addressLines.length - 1);
      const baseYOffset = extraLines * 4;

      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("TEL.:", 14, 81 + baseYOffset);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(depotContact, 58, 81 + baseYOffset);

      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("EMAIL:", 14, 86 + baseYOffset);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(depotEmail, 58, 86 + baseYOffset);

      // Fix country field - handle nested object properly and check for actual country data
      let countryValue = "N/A";
      if (depot?.country) {
        if (typeof depot.country === "string") {
          countryValue = depot.country;
        } else if (depot.country.name) {
          countryValue = depot.country.name;
        } else if (depot.country.countryName) {
          countryValue = depot.country.countryName;
        }
      }
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("COUNTRY:", 14, 91 + baseYOffset);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(countryValue, 58, 91 + baseYOffset);

      // For empty repo jobs, use the depotMobile variable that was set earlier
      // This ensures consistency with the CRO modal form data
      const mobileValue = depotMobile || "";

      console.log(
        "Mobile field debug - depotMobile from CRO form:",
        depotMobile
      );
      console.log("Mobile field debug - final mobileValue:", mobileValue);

      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("MOBILE:", 14, 96 + baseYOffset);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(mobileValue, 58, 96 + baseYOffset);

      // Add horizontal line below terminal section
      doc.setDrawColor(0, 0, 0);
      doc.setLineWidth(0.5);
      doc.line(14, 102 + baseYOffset, 236, 102 + baseYOffset);

      // --- ORDER INFORMATION ---
      // Right side fields - align values consistently with left side pattern
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("DATE:", 120, 60);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(croDate, 165, 60);

      // doc.setFont("arial", "bold");
      // doc.setFontSize(10);
      // doc.text("HOUSE BL:", 120, 66);
      // doc.setFont("arial", "normal");
      // doc.setFontSize(10);
      // doc.text(shipment.houseBL || shipment.masterBL || "N/A", 165, 66);

      // doc.setFont("arial", "bold");
      // doc.setFontSize(10);
      // doc.text("REFERENCE NO.:", 120, 72);
      // doc.setFont("arial", "normal");
      // doc.setFontSize(10);
      // doc.text(shipment.refNumber || "", 165, 72);

      // --- SHIPMENT DETAILS ---
      const shipmentDetailsStartY = 110 + baseYOffset;
      // addTextWithSpacing(doc, "SHIPPER:", shipper?.companyName || "N/A", 14, shipmentDetailsStartY, 45);
      addTextWithSpacing(
        doc,
        "RELEASE DATE:",
        releaseDate,
        14,
        shipmentDetailsStartY,
        45
      );
      addTextWithSpacing(
        doc,
        "POL:",
        groupPol,
        14,
        shipmentDetailsStartY + 6,
        45
      );
      addTextWithSpacing(
        doc,
        "FINAL DESTINATION:",
        finalDestination,
        14,
        shipmentDetailsStartY + 12,
        45
      );
      // addTextWithSpacing(doc, "TANK PREP:", shipment.tankPreparation || "N/A", 14, shipmentDetailsStartY + 24, 45);

      // // For empty repo jobs, containers are always non-hazardous since they're empty
      // addTextWithSpacing(doc, "PRODUCT TYPE:", "Non-Hazardous", 14, shipmentDetailsStartY + 18, 45);

      // --- RIGHT COLUMN SHIPMENT DETAILS ---
      addTextWithSpacing(
        doc,
        "CLOSING DATE/TIME:",
        "00:00:00",
        120,
        shipmentDetailsStartY,
        50
      );
      // Add product name below POD value
      // addTextWithSpacing(doc, "PRODUCT NAME:", productName, 120, shipmentDetailsStartY + 6, 50);
      addTextWithSpacing(
        doc,
        "POD:",
        groupPod,
        120,
        shipmentDetailsStartY + 6,
        50
      );

      // --- TERMS AND CONDITIONS ---
      const termsStartY = 150 + baseYOffset;
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("TERMS AND CONDITIONS:", 14, termsStartY);

      doc.setFont("arial", "normal");
      doc.setFontSize(10);

      // Point 1: Cancellation Costs - No gap
      doc.text("1.", 18, termsStartY + 7);
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("Cancellation Costs:", 25, termsStartY + 7);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(
        "Should there be a cancellation of the shipment after the tank has been prepared and a clean certificate has been issued, all",
        56,
        termsStartY + 7
      );
      doc.text(
        "incurred costs shall be the responsibility of the shipper.",
        25,
        termsStartY + 12
      );

      // Point 2: Validity and Liability - No gap
      doc.text("2.", 18, termsStartY + 17);
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("Validity and Liability:", 25, termsStartY + 17);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(
        "The clean certificate is valid for a period of seven days from the date of issuance. If the tank container is picked up after",
        60,
        termsStartY + 17
      );
      doc.text(
        "this validity period without cargo loading, we disclaim any liability for cargo contamination, deterioration in cargo quality, or any other related",
        25,
        termsStartY + 22
      );
      doc.text("issues.", 25, termsStartY + 27);

      // Point 3: Resurvey Requirement - No gap
      doc.text("3.", 18, termsStartY + 32);
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("Resurvey Requirement:", 25, termsStartY + 32);
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(
        "In the event that the tank container is not picked up after the expiration of the clean certificate, a resurvey will be",
        62,
        termsStartY + 32
      );
      doc.text(
        "required. The shipper shall bear all costs associated with this resurvey.",
        25,
        termsStartY + 37
      );

      // Add horizontal line after terms and conditions
      const vesselTableStartY = 190 + baseYOffset;
      doc.setDrawColor(0, 0, 0);
      doc.setLineWidth(0.5);
      doc.line(14, vesselTableStartY, 236, vesselTableStartY);

      // --- VESSEL/VOYAGE DETAILS TABLE ---
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("VESSEL / VOY", 40, vesselTableStartY + 5);
      doc.text("ETA", 110, vesselTableStartY + 5);
      doc.text("ETD", 160, vesselTableStartY + 5);

      // Add horizontal line under headers
      doc.setLineWidth(0.5);
      doc.line(14, vesselTableStartY + 8, 236, vesselTableStartY + 8);

      // Vessel data
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      doc.text(vesselVoyage || "N/A", 40, vesselTableStartY + 14);
      const etaDisplay = eta ? `${groupPod} ${eta}` : `${groupPod}`;
      const etdDisplay = etd ? `${groupPol} ${etd}` : `${groupPol}`;
      doc.text(etaDisplay, 110, vesselTableStartY + 14);
      doc.text(etdDisplay, 160, vesselTableStartY + 14);

      // Add horizontal line after vessel table
      doc.line(14, vesselTableStartY + 18, 236, vesselTableStartY + 18);

      // --- CONTAINER RELEASE INSTRUCTION ---
      const instructionY = vesselTableStartY + 24;
      doc.setFont("arial", "bold");
      doc.setFontSize(8);
      // Keep the text on one line as in reference
      doc.text(
        `KINDLY RELEASE ${containerCount} X 20' ISO TANK CONTAINERS WITH THE FOLLOWING CONTAINER NUMBER ACCORDING TO THE ABOVE MENTIONED SHIPPER DETAILS.`,
        124,
        instructionY,
        { align: "center" }
      );

      // Add horizontal line after instruction
      doc.setLineWidth(0.5);
      doc.line(14, instructionY + 4, 236, instructionY + 4);

      // --- CONTAINER DETAILS TABLE ---
      const containerTableStartY = instructionY + 10;
      doc.setFont("arial", "bold");
      doc.setFontSize(10);
      doc.text("SR NO.", 20, containerTableStartY);
      doc.text("TANK NO", 60, containerTableStartY);

      // Add horizontal line under headers
      doc.line(14, containerTableStartY + 3, 236, containerTableStartY + 3);

      // Container data - show containers from this specific group
      const containersToShow =
        groupContainers.length > 0
          ? groupContainers
          : [{ containerNumber: "N/A", capacity: "N/A", tare: "N/A" }];

      let currentPage = 1;
      const firstPageMaxY = 280;
      const containerStartY = containerTableStartY + 10;
      const containerSpacing = 20; // Use consistent spacing of 20 pixels per container
      const containersPerFirstPage = Math.floor(
        (firstPageMaxY - containerStartY) / containerSpacing
      ); // Containers that fit on first page
      const containersPerSubsequentPage = Math.floor(
        (280 - 60) / containerSpacing
      ); // Containers that fit on subsequent pages (accounting for header)
      let containersOnCurrentPage = 0;

      // All containers on single page or multiple pages if needed
      containersToShow.forEach((container: any, index: number) => {
        // Check if we need a new page
        const maxForCurrentPage =
          currentPage === 1
            ? containersPerFirstPage
            : containersPerSubsequentPage;

        if (containersOnCurrentPage >= maxForCurrentPage) {
          // Add footer to current page before creating new page
          doc.setFont("arial", "bold");
          doc.setFontSize(9);
          doc.text(
            "ALL BUSINESS WITH RISTAR LOGISTICS PRIVATE LIMITED IS CONDUCTED ACCORDING TO SLA STANDARD TRADING CONDITIONS.",
            120,
            287,
            { align: "center" }
          );
          doc.text(
            "A COPY OF OUR TERMS AND CONDITIONS ARE AVAILABLE UPON RECEIPT OF A WRITTEN REQUEST.",
            120,
            291,
            { align: "center" }
          );

          // Add page number to current page
          doc.setFont("arial", "normal");
          doc.setFontSize(10);
          const remainingContainers =
            containersToShow.length - containersPerFirstPage;
          const additionalPages = Math.ceil(
            remainingContainers / containersPerSubsequentPage
          );
          const totalPages = 1 + additionalPages;
          doc.text(`Page ${currentPage} of ${totalPages}`, 220, 295);

          currentPage++;
          containersOnCurrentPage = 0;
          doc.addPage();

          // Add complete header to new page
          // Right side - Company details (shifted more to the right)
          if (ristarLogoBase64) {
            doc.addImage(ristarLogoBase64, "PNG", 14, 5, 100, 30);
          }
          doc.setFont("arial", "bold");
          doc.setFontSize(10);
          doc.setTextColor(0, 0, 0);
          doc.text("RISTAR LOGISTICS PTE. LTD.", 160, 11);

          doc.setFont("arial", "normal");
          doc.setFontSize(10);
          doc.text("GSTIN 27AAOCR2909Q1ZK", 160, 16);
          doc.text(
            "Office No. C-0010, Akshar Business Park, Sector 25",
            160,
            21
          );
          doc.text("Vashi, Navi Mumbai, Maharashtra, India 400703.", 160, 26);
          doc.text("TEL: +65 6221 4844", 160, 31);
          doc.text("WWW.RISTARLOGISTICS.COM", 160, 36);

          // Add horizontal line under headers
          doc.setLineWidth(0.5);
          doc.line(14, 53, 236, 53);
        }

        // Calculate yPos for current page - fixed spacing for subsequent pages using consistent spacing
        const adjustedYPos =
          currentPage === 1
            ? containerStartY + containersOnCurrentPage * containerSpacing
            : 58 + containersOnCurrentPage * containerSpacing;

        // SR NO.
        doc.setFont("arial", "normal");
        doc.setFontSize(10);
        doc.text((index + 1).toString(), 20, adjustedYPos + 2);

        // TANK NO details with minimal gaps - side by side
        doc.setFont("arial", "bold");
        doc.setFontSize(10);
        doc.text("TANK NO:", 60, adjustedYPos);
        doc.setFont("arial", "normal");
        doc.setFontSize(10);
        doc.text(container.containerNumber || "N/A", 79, adjustedYPos);

        doc.setFont("arial", "bold");
        doc.setFontSize(10);
        doc.text("CAPACITY:", 60, adjustedYPos + 5);
        doc.setFont("arial", "normal");
        doc.setFontSize(10);
        doc.text(container.capacity || "N/A", 81, adjustedYPos + 5);

        doc.setFont("arial", "bold");
        doc.setFontSize(10);
        doc.text("TARE WEIGHT:", 60, adjustedYPos + 10);
        doc.setFont("arial", "normal");
        doc.setFontSize(10);
        doc.text(container.tare || "N/A", 88, adjustedYPos + 10);

        containersOnCurrentPage++;
      });

      // Add footer to the last page (whether it's the first page or a subsequent page)
      doc.setFont("arial", "bold");
      doc.setFontSize(9);
      doc.text(
        "ALL BUSINESS WITH RISTAR LOGISTICS PRIVATE LIMITED IS CONDUCTED ACCORDING TO SLA STANDARD TRADING CONDITIONS.",
        120,
        287,
        { align: "center" }
      );
      doc.text(
        "A COPY OF OUR TERMS AND CONDITIONS ARE AVAILABLE UPON RECEIPT OF A WRITTEN REQUEST.",
        120,
        291,
        { align: "center" }
      );

      // Add page number to the last page
      doc.setFont("arial", "normal");
      doc.setFontSize(10);
      const remainingContainers = Math.max(
        0,
        containersToShow.length - containersPerFirstPage
      );
      const additionalPages =
        remainingContainers > 0
          ? Math.ceil(remainingContainers / containersPerSubsequentPage)
          : 0;
      const totalPages = 1 + additionalPages;
      doc.text(`Page ${currentPage} of ${totalPages}`, 220, 295);

      // Add horizontal line after container table (only on first page) - moved down with consistent spacing
      const containersOnFirstPageCount = Math.min(
        containersToShow.length,
        containersPerFirstPage
      );
      const lastContainerY =
        containerStartY +
        (containersOnFirstPageCount - 1) * containerSpacing +
        15; // Use consistent spacing variable
      doc.setLineWidth(0.5);
      doc.line(14, lastContainerY, 236, lastContainerY);

      // Set flag for next iteration
      isFirstGroup = false;
    });

    doc.save(
      `${
        emptyRepoJob.houseBL || emptyRepoJob.jobNumber || "EmptyRepo_CRO"
      }_CRO.pdf`
    );
  } catch (err) {
    console.error("Error generating CRO PDF", err);
  }
}
